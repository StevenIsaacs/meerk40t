name: Weekly Binary Builds

on:
  schedule:
    # Run every Monday at 2 AM UTC
    - cron: '0 2 * * 1'
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout meerk40t
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: 3.11
        architecture: x86

    - name: Install dependencies
      run: |
        pip install "opencv-python-headless<=4.8.1.78"
        pip install -r requirements.txt
        pip install -r requirements-optional-win.txt
        pip install .
        pip install meerk40t-barcodes

    - name: Build PyInstaller bootloaders
      env:
        PYTHONHASHSEED: 12506
      run: |
        git clone --depth=1 https://github.com/pyinstaller/pyinstaller
        cd pyinstaller/bootloader
        python3 ./waf distclean all --target-arch=32bit
        cd ..
        pip3 install .
        cd ..

    - name: Build MeerK40t Windows binary
      run: |
        cd meerk40t
        move external_plugins.py external_plugins.unused
        move external_plugins_build.py external_plugins.py
        cd ..

        move meerk40t.py mk40t.py
        pyinstaller .github/workflows/win/meerk40t.spec
        move mk40t.py meerk40t.py

        cd dist
        move MeerK40t.exe "MeerK40t-windows-${{ github.run_number }}.exe"

    - name: Upload Windows binary
      uses: actions/upload-artifact@v4
      with:
        name: meerk40t-windows
        path: dist/MeerK40t-windows-${{ github.run_number }}.exe
        retention-days: 60

  build-macos:
    runs-on: macos-latest
    steps:
    - name: Checkout meerk40t
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        pip install "opencv-python-headless<=4.8.1.78"
        pip install -r requirements.txt
        pip install -r requirements-optional-macos.txt
        pip install .
        pip install meerk40t-barcodes

    - name: Build MeerK40t macOS binary
      run: |
        cd meerk40t
        mv external_plugins.py external_plugins.unused
        mv external_plugins_build.py external_plugins.py
        cd ..

        mv meerk40t.py mk40t.py
        pyinstaller --hidden-import wx._adv --hidden-import wx._xml --hidden-import meerk40t --windowed --noconfirm -i .github/workflows/mac/meerk40t.icns --add-data 'locale/:locale/' --name MeerK40t mk40t.py
        mv mk40t.py meerk40t.py

        cd dist
        mv MeerK40t.app "MeerK40t-macos-${{ github.run_number }}.app"

    - name: Upload macOS binary
      uses: actions/upload-artifact@v4
      with:
        name: meerk40t-macos
        path: dist/MeerK40t-macos-${{ github.run_number }}.app
        retention-days: 60

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout meerk40t
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libusb-1.0-0-dev portaudio19-dev
        sudo apt-get install -y \
          libgtk-3-dev \
          cmake \
          libeigen3-dev \
          libagg-dev \
          libpotrace-dev \
          python3-dev \
          wget \
          fuse \
          libfuse2 \
          desktop-file-utils \
          imagemagick
        pip install "opencv-python-headless<=4.8.1.78"
        pip install -r requirements.txt
        pip install -r requirements-optional-linux.txt
        pip install .
        pip install meerk40t-barcodes

    - name: Build MeerK40t Linux binary
      run: |
        cd meerk40t
        mv external_plugins.py external_plugins.unused
        mv external_plugins_build.py external_plugins.py
        cd ..

        mv meerk40t.py mk40t.py
        pyinstaller .github/workflows/linux/meerk40t.spec
        mv mk40t.py meerk40t.py

    - name: Create AppImage
      run: |
        # Download appimagetool (pinned to specific release for security)
        APPIMAGETOOL_VERSION="13"
        APPIMAGETOOL_URL="https://github.com/AppImage/AppImageKit/releases/download/${APPIMAGETOOL_VERSION}/appimagetool-x86_64.AppImage"
        APPIMAGETOOL_SHA256_URL="https://github.com/AppImage/AppImageKit/releases/download/${APPIMAGETOOL_VERSION}/appimagetool-x86_64.AppImage.sha256"

        wget -O appimagetool "${APPIMAGETOOL_URL}"
        chmod +x appimagetool

        # Fetch official checksum and verify for security
        wget -O appimagetool.sha256 "${APPIMAGETOOL_SHA256_URL}"
        sha256sum -c appimagetool.sha256 || exit 1

        # Create AppDir structure
        mkdir -p AppDir/usr/bin
        mkdir -p AppDir/usr/lib
        mkdir -p AppDir/usr/share/applications
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
        mkdir -p AppDir/usr/share/metainfo

        # Copy the executable
        cp dist/MeerK40t AppDir/usr/bin/meerk40t
        chmod +x AppDir/usr/bin/meerk40t

        # Copy icon and convert to PNG if needed
        if [ -f "meerk40t.ico" ]; then
          # Check if the ICO file is not empty
          if [ ! -s "meerk40t.ico" ]; then
            echo "ERROR: meerk40t.ico is empty or malformed. Aborting icon conversion." >&2
            exit 1
          fi
          # Convert ICO to PNG for AppImage with error handling
          if ! convert meerk40t.ico AppDir/usr/share/icons/hicolor/256x256/apps/meerk40t.png; then
            echo "ERROR: Failed to convert meerk40t.ico to PNG. Is ImageMagick installed and is the ICO valid?" >&2
            exit 1
          fi
        else
          echo "WARNING: meerk40t.ico not found. AppImage will not have a custom icon." >&2
        fi

        # Create desktop file
        cat > AppDir/usr/share/applications/meerk40t.desktop << EOF
        [Desktop Entry]
        Name=MeerK40t
        Exec=meerk40t
        Icon=meerk40t
        Type=Application
        Categories=Graphics;VectorGraphics;
        Comment=Laser Cutter Software
        Terminal=false
        EOF

        # Create AppStream metainfo
        cat > AppDir/usr/share/metainfo/meerk40t.appdata.xml << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <component type="desktop-application">
          <id>meerk40t</id>
          <name>MeerK40t</name>
          <summary>Laser Cutter Control Software</summary>
          <description>
            <p>MeerK40t is a free and open-source laser cutter control software.</p>
          </description>
          <launchable type="desktop-id">meerk40t.desktop</launchable>
          <categories>
            <category>Graphics</category>
            <category>VectorGraphics</category>
          </categories>
        </component>
        EOF

        # Create AppRun script
        cat > AppDir/AppRun << EOF
        #!/bin/bash
        HERE="\$(dirname "\$(readlink -f "\${0}")")"
        export PATH="\${HERE}/usr/bin:\${PATH}"
        export LD_LIBRARY_PATH="\${HERE}/usr/lib:\${LD_LIBRARY_PATH}"
        export PYTHONPATH="\${HERE}/usr/lib/python3/dist-packages:\${PYTHONPATH}"
        exec "\${HERE}/usr/bin/meerk40t" "\$@"
        EOF
        chmod +x AppDir/AppRun

        # Build AppImage
        ./appimagetool AppDir "MeerK40t-linux-${{ github.run_number }}.AppImage"

    - name: Test AppImage
      run: |
        # Make AppImage executable and test basic functionality
        chmod +x "MeerK40t-linux-${{ github.run_number }}.AppImage"
        # Note: Can't run GUI in headless environment, but we can check if it starts
        timeout 15s ./"MeerK40t-linux-${{ github.run_number }}.AppImage" --version
        if [ $? -ne 0 ]; then
          echo "ERROR: AppImage failed to start or did not return version information."
          exit 1
        fi

    - name: Upload Linux AppImage
      uses: actions/upload-artifact@v4
      with:
        name: meerk40t-linux
        path: MeerK40t-linux-${{ github.run_number }}.AppImage
        retention-days: 60

  create-release:
    # Run even if some builds fail, as long as at least one succeeds
    needs: [build-windows, build-macos, build-linux]
    if: always() && (needs.build-windows.result == 'success' || needs.build-macos.result == 'success' || needs.build-linux.result == 'success')
    runs-on: ubuntu-latest
    steps:
    - name: Checkout meerk40t
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get merged PRs since last release
      id: get-prs
      uses: actions/github-script@v7
      with:
        script: |
          const { execSync } = require('child_process');
          
          // Get the latest release tag
          let latestRelease = 'v0.9.0'; // fallback
          try {
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            if (releases.data.length > 0) {
              latestRelease = releases.data[0].tag_name;
            }
          } catch (error) {
            console.log('Could not fetch latest release, using fallback');
          }
          
          // Get merged PRs since the latest release
          const prs = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'closed',
            sort: 'updated',
            direction: 'desc',
            per_page: 20
          });
          
          const mergedPRs = prs.data
            .filter(pr => pr.merged_at !== null)
            .filter(pr => {
              // Only include PRs merged after the latest release
              const prDate = new Date(pr.merged_at);
              const releaseDate = new Date(latestRelease.replace('v', ''));
              return prDate > releaseDate;
            })
            .slice(0, 20); // Limit to 20 most recent
            
          let changes = '';
          if (mergedPRs.length > 0) {
            changes = '### 🔄 Recent Changes\n\n';
            mergedPRs.forEach(pr => {
              changes += `- ${pr.title} ([#${pr.number}](${pr.html_url})) by @${pr.user.login}\n`;
            });
            changes += '\n';
          } else {
            changes = '### 🔄 Recent Changes\n\nNo merged pull requests since the last release.\n\n';
          }
          
          core.setOutput('changes', changes);

    - name: Download all binaries
      run: |
        # Download artifacts conditionally based on build success
        if [ "${{ needs.build-windows.result }}" = "success" ]; then
          echo "Windows build succeeded - downloading artifact"
        fi
        if [ "${{ needs.build-macos.result }}" = "success" ]; then
          echo "macOS build succeeded - downloading artifact"
        fi
        if [ "${{ needs.build-linux.result }}" = "success" ]; then
          echo "Linux build succeeded - downloading artifact"
        fi
      continue-on-error: true

    - name: Download Windows binary
      if: needs.build-windows.result == 'success'
      uses: actions/download-artifact@v4
      with:
        name: meerk40t-windows
        path: binaries/

    - name: Download macOS binary
      if: needs.build-macos.result == 'success'
      uses: actions/download-artifact@v4
      with:
        name: meerk40t-macos
        path: binaries/

    - name: Download Linux binary
      if: needs.build-linux.result == 'success'
      uses: actions/download-artifact@v4
      with:
        name: meerk40t-linux
        path: binaries/

    - name: Prepare macOS app for release
      if: needs.build-macos.result == 'success'
      run: |
        cd binaries/meerk40t-macos
        zip -r "../MeerK40t-macos-${{ github.run_number }}.zip" "MeerK40t-macos-${{ github.run_number }}.app"
        cd ../..

    - name: Create weekly release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: weekly-${{ github.run_number }}
        name: Weekly Build ${{ github.run_number }}
        body: |
          ## 🚀 MeerK40t Weekly Build ${{ github.run_number }}

          **Automated weekly binary build of MeerK40t - the open-source laser cutting software.**

          ### 📋 Build Information
          - **Commit**: [`${{ github.sha }}`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
          - **Build**: #${{ github.run_number }}
          - **Date**: ${{ github.event.repository.updated_at }}
          - **Branch**: `${{ github.ref_name }}`

          ${{ steps.get-prs.outputs.changes }}

          ### 📦 Downloads

          | Platform | Status | File | Description |
          |----------|--------|------|-------------|
          ${{ needs.build-windows.result == 'success' && '| **Windows** | ✅ Available | `MeerK40t-windows-${{ github.run_number }}.exe` | 32-bit Windows executable |' || '| **Windows** | ❌ Failed | - | Build failed |'}}
          ${{ needs.build-macos.result == 'success' && '| **macOS** | ✅ Available | `MeerK40t-macos-${{ github.run_number }}.app.zip` | macOS application bundle (zipped) |' || '| **macOS** | ❌ Failed | - | Build failed |'}}
          ${{ needs.build-linux.result == 'success' && '| **Linux** | ✅ Available | `MeerK40t-linux-${{ github.run_number }}.AppImage` | Linux AppImage (universal) |' || '| **Linux** | ❌ Failed | - | Build failed |'}}

          ### 🖥️ System Requirements

          #### Windows
          - Windows 10 or later
          - 32-bit architecture support
          - No additional dependencies required

          #### macOS
          - macOS 10.14 or later
          - Intel and Apple Silicon support

          #### Linux
          - Most modern Linux distributions
          - AppImage format - no installation required

          ### 🚀 Installation Instructions

          #### Windows
          1. Download `MeerK40t-windows-${{ github.run_number }}.exe`
          2. Run the executable (may show security warnings - allow it)
          3. MeerK40t will start automatically

          #### macOS
          1. Download `MeerK40t-macos-${{ github.run_number }}.app.zip`
          2. Extract the zip file
          3. Move `MeerK40t.app` to your Applications folder
          4. Run MeerK40t from Applications

          #### Linux
          1. Download `MeerK40t-linux-${{ github.run_number }}.AppImage`
          2. Make it executable: `chmod +x MeerK40t-linux-${{ github.run_number }}.AppImage`
          3. Run: `./MeerK40t-linux-${{ github.run_number }}.AppImage`

          ### ⚠️ Important Notes

          - This is a **weekly development build** - use at your own risk
          - For stable releases, see: [Release Versions](${{ github.server_url }}/${{ github.repository }}/releases)
          - Latest stable: [0.9.x series](${{ github.server_url }}/${{ github.repository }}/releases/latest)

          ${{ (needs.build-windows.result != 'success' || needs.build-macos.result != 'success' || needs.build-linux.result != 'success') && '### ⚠️ Build Status\n\nSome platform builds failed. Only successfully built binaries are included in this release. Failed builds will be addressed in future releases.' || '' }}
        files: |
          ${{ needs.build-windows.result == 'success' && format('binaries/meerk40t-windows/MeerK40t-windows-{0}.exe', github.run_number) || '' }}
          ${{ needs.build-macos.result == 'success' && format('MeerK40t-macos-{0}.zip', github.run_number) || '' }}
          ${{ needs.build-linux.result == 'success' && format('binaries/meerk40t-linux/MeerK40t-linux-{0}.AppImage', github.run_number) || '' }}
        prerelease: true
